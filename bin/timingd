#!/usr/bin/python3

import time
import pigpio
import numpy as np

import os
import signal
import sys

import yaml
import getopt

button_lockout=20 * 1000 * 1000 * 1000  # 20 seconds in nanoseconds

button_gpio=17
button_falling_edge=False
button_dbnce=300000	# 0.3s debounce.
green_gpio=23
green_falling_edge=False
green_dbnce=300000	# 0.3s debounce.
start_gpio=24
start_falling_edge=False
start_dbnce=300000	# 0.3s debounce.
start_max=4
split_gpio=-1
split_falling_edge=False
split_dbnce=300000	# 0.3s debounce.
split_max=4
finish_gpio=25
finish_falling_edge=False
finish_dbnce=300000	# 0.3s debounce.
finish_max=4

# Update defaults from the config file
def reset_debounce(sig, frame):
    debounce[button_gpio] = start_tick
    debounce[green_gpio] = start_tick
    debounce[start_gpio] = start_tick + 2
    if (split_gpio > 0):
        debounce[split_gpio] = start_tick + 3
    debounce[finish_gpio] = start_tick + 4

def debug(sig, frame):
    import pdb
    pdb.Pdb().set_trace(frame)
    debug.cb_debug=1
    print("Turning on cb_debug")

debug.cb_debug=0

signal.signal(signal.SIGUSR2, debug)

def fake_timing(sig, frame):
    now = pi.get_current_tick();
    if (fake_timing.evt == -1):
        fake_timing.evt = 0
        cb_button(button_gpio, 2, now)
    elif (fake_timing.evt == 0):
        fake_timing.evt = 1
        cb_green(green_gpio, 2, now)
    elif (fake_timing.evt == 1):
        fake_timing.evt = 2
        cb_start(start_gpio, 2, now)
    elif (split_gpio > 0):
        if (fake_timing.evt == 2):
            fake_timing.evt = 3
            cb_split(split_gpio, 2, now)
        elif (fake_timing.evt == 3):
            fake_timing.evt = -1
            cb_finish(finish_gpio, 2, now)
    elif (split_gpio <= 0):
        if (fake_timing.evt == 2):
            fake_timing.evt = -1
            cb_finish(finish_gpio, 2, now)

def fake_timing_0(sig, frame):
    now = pi.get_current_tick();
    cb_button(button_gpio, 2, now)

def fake_timing_1(sig, frame):
    now = pi.get_current_tick();
    cb_green(green_gpio, 2, now)

def fake_timing_2(sig, frame):
    now = pi.get_current_tick();
    cb_start(start_gpio, 2, now)

def fake_timing_2s(sig, frame):
    if (split_gpio > 0):
        now = pi.get_current_tick();
        cb_split(split_gpio, 2, now)

def fake_timing_3(sig, frame):
    now = pi.get_current_tick();
    cb_finish(finish_gpio, 2, now)

fake_timing.evt=-1

signal.signal(signal.SIGUSR1, fake_timing)

signal.signal(signal.SIGRTMIN, fake_timing_0)
signal.signal(signal.SIGRTMIN+1, fake_timing_1)
signal.signal(signal.SIGRTMIN+2, fake_timing_2)
signal.signal(signal.SIGRTMIN+3, fake_timing_3)
signal.signal(signal.SIGRTMIN+4, fake_timing_2s)

config_file="/etc/timing/timing.conf"
database="/data/Track_Time/Track_Time.db"
verbose=0
argv = sys.argv[1:]

try:
  opts, args = getopt.getopt(argv, "c:dD:v", ["config =", "database ="])
except getopt.GetoptError as err:
  print('Bad arguments: ' + str(err), file=sys.stderr)
  exit(1)

# First pass of the options
for opt, arg in opts:
  if opt in ['-c', '--config']:
    config_file = arg
  elif opt == '-d':
    debug.cb_debug = 1
  elif opt == '-v':
    verbose = verbose + 1

# Read in the config file
if os.path.isfile(config_file):
  config=yaml.safe_load(open(config_file))
  if (verbose > 0):
    print(yaml.dump(config))
else:
  print('File does not exist: ' + config_file, file=sys.stderr)
  exit(1)

if 'database_path' in config :
  database=config['database_path']

if 'timing' in config :
  if 'debug' in config['timing'] :
    if config['timing']['debug'] :
      debug.cb_debug = 1
  if 'inputs' in config['timing'] :
    inputs=config['timing']['inputs']
    if 'button' in inputs:
      if 'gpio' in inputs['button'] :
        button_gpio = inputs['button']['gpio']
      if 'dbnce' in inputs['button'] :
        if isinstance(inputs['button']['dbnce'], int) :
          button_dbnce = inputs['button']['dbnce'] * 1000
      if 'falling_edge' in inputs['button'] :
        button_falling_edge = inputs['button']['falling_edge']
      if (verbose > 0) :
        print("  Button gpio = " + str(button_gpio) + ",\tfalling_edge: " + str(button_falling_edge) + "\tdebounce: " + str(button_dbnce))

    if 'green' in inputs:
      if 'gpio' in inputs['green'] :
        green_gpio = inputs['green']['gpio']
      if 'dbnce' in inputs['green'] :
        if isinstance(inputs['green']['dbnce'], int) :
          green_dbnce = inputs['green']['dbnce'] * 1000
      if 'falling_edge' in inputs['green'] :
        green_falling_edge = inputs['green']['falling_edge']
      if (verbose > 0) :
        print("  Green gpio = " + str(green_gpio) + ",\tfalling_edge: " + str(green_falling_edge) + "\tdebounce: " + str(green_dbnce))

    if 'start' in inputs:
      if 'gpio' in inputs['start'] :
        start_gpio = inputs['start']['gpio']
      if 'dbnce' in inputs['start'] :
        if isinstance(inputs['start']['dbnce'], int) :
          start_dbnce = inputs['start']['dbnce'] * 1000
      if 'max' in inputs['start'] :
        if isinstance(inputs['start']['max'], int) and inputs['start']['max'] >= 0 :
          start_max = inputs['start']['max']
      if 'falling_edge' in inputs['start'] :
        start_falling_edge = inputs['start']['falling_edge']
      if (verbose > 0) :
        print("  Start gpio = " + str(start_gpio) + ",\tfalling_edge: " + str(start_falling_edge) + "\tdebounce: " + str(start_dbnce) + "\tmax: " + str(start_max))

    if 'split' in inputs:
      if 'gpio' in inputs['split'] :
        split_gpio = inputs['split']['gpio']
      if 'dbnce' in inputs['split'] :
        if isinstance(inputs['split']['dbnce'], int) :
          split_dbnce = inputs['split']['dbnce'] * 1000
      if 'max' in inputs['split'] :
          split_max = inputs['split']['max']
      if 'falling_edge' in inputs['split'] :
        split_falling_edge = inputs['split']['falling_edge']
      if (verbose > 0) :
        print("  Split(2) gpio = " + str(split_gpio) + ",\tfalling_edge: " + str(split_falling_edge) + "\tdebounce: " + str(split_dbnce) + "\tmax: " + str(split_max))

    if 'finish' in inputs:
      if 'gpio' in inputs['finish'] :
        finish_gpio = inputs['finish']['gpio']
      if 'dbnce' in inputs['finish'] :
        if isinstance(inputs['finish']['dbnce'], int) :
          finish_dbnce = inputs['finish']['dbnce'] * 1000
      if 'max' in inputs['finish'] :
          finish_max = inputs['finish']['max']
      if 'falling_edge' in inputs['finish'] :
        finish_falling_edge = inputs['finish']['falling_edge']
      if (verbose > 0) :
        print("  Finish gpio = " + str(finish_gpio) + ",\tfalling_edge: " + str(finish_falling_edge) + "\tdebounce: " + str(finish_dbnce) + "\tmax: " + str(finish_max))

# Second pass of the command line options - might overide values read from config file
for opt, arg in opts:
  if opt in ['-D', '--database']:
    database = arg

import apsw
conn = apsw.Connection(database, apsw.SQLITE_OPEN_READWRITE)
cur = conn.cursor()
cur.execute('pragma busy_timeout=5000')
cur.execute('pragma wal_checkpoint(full);')

NewCar_f = open("/data/state_NewCar", "w")
Green_f = open("/data/state_Green", "w")
Start_f = open("/data/state_Start", "w")
Split_f = open("/data/state_Split", "w")
Finish_f = open("/data/state_Finish", "w")

def new_car():
    #cur.execute("select current_run  from current_run order by ROWID limit 1")
    #if (len(result) == 1) :
    #    new_car.run_num = result[0][0]
    cur.execute("SELECT current_event, current_run "
      "FROM current_event LEFT JOIN current_run");
    result=cur.fetchall()
    if (len(result) == 1) :
        new_car.event = result[0][0]
        new_car.run_num = result[0][1]
        print("run_num" , new_car.run_num)
    else :
        new_car.run_num = -2
        print("No current run set, using", new_car.run_num)
    cur.execute("BEGIN")
    cur.execute("select car_num  from next_car order by ord limit 2")
    result=cur.fetchall()
    if (len(result) >= 1) :
        new_car.curr_car = result[0][0]
        print("curr_car" , new_car.curr_car)
        if (len(result) > 1) :
          new_car.next_car = result[1][0]
        else :
          new_car.next_car = new_car.next_car_dummy
        cur.execute("delete from next_car where car_num = ?", (new_car.curr_car, ))
        cur.execute("update current_car set current_car = ? where ROWID = 1", (new_car.curr_car, ))
        cur.execute("COMMIT")
        NewCar_f.seek(0)
        NewCar_f.write(str(new_car.curr_car)+"    ")
        NewCar_f.flush()
    else :
        new_car.curr_car = new_car.next_missing_car
        new_car.next_missing_car = new_car.next_missing_car - 1
        print("No next car available, using" , new_car.curr_car)
        cur.execute("ROLLBACK")
        new_car.next_car = new_car.curr_car

new_car.event=-1
new_car.run_num = 0
new_car.next_missing_car = 66001
new_car.curr_car = 66000
new_car.next_car_dummy = 66666
new_car.next_car = new_car.next_car_dummy
new_car.tick = 0
new_car.tick_val = 0
new_car.time=time.monotonic_ns() - button_lockout

#  0 - No Car (prev car finished) ,   1 - Car has green light  ,   2 - Car has a start time
new_car.state = 0  #  No Car

import time
debounce = np.empty(60, dtype=np.uint32)

def cb_button(gpio, level, tick):
    debo=debounce[gpio]
    debounce[gpio] = tick
    if pigpio.tickDiff(debo,tick) > button_dbnce :  # 0.3s debounce.
        mon_now=time.monotonic_ns()
        val = int(pigpio.tickDiff(start_tick, tick) / 1000)
        cb_start.start_events=0
        cb_split.split_events=0
        cb_finish.finish_events=0
        if ( (mon_now - new_car.time) > button_lockout ) :
            new_car.time = mon_now
            new_car()
            new_car.tick = pi.get_current_tick()
            new_car.tick_val = val
        if debug.cb_debug:
            print(gpio, level, val, pigpio.tickDiff(tick, new_car.tick), new_car.tick, new_car.time)
        new_car.state = 1  #  Car given buton
    else:
        if debug.cb_debug:
            print(gpio, pigpio.tickDiff(debo,tick), "debounce")
    if debug.cb_debug:
        print("debug ", gpio, tick, debo)

def cb_green(gpio, level, tick):
    debo=debounce[gpio]
    debounce[gpio] = tick
    if pigpio.tickDiff(debo,tick) > green_dbnce :  # 0.3s debounce.
        mon_now=time.monotonic_ns()
        val = int(pigpio.tickDiff(start_tick, tick) / 1000)
        cb_start.start_events=0
        cb_split.split_events=0
        cb_finish.finish_events=0
        if ( (mon_now - new_car.time) > button_lockout ) :
            new_car.time = mon_now
            new_car()
            new_car.tick = pi.get_current_tick()
            new_car.tick_val = val
            new_car.state = 1  #  Car given green
        else:
            if (val < new_car.tick_val) :
                val=val+4294967     # undo the wrap for database entry
            if (new_car.state != 2) :  #  red lighted
                new_car.state = 1  #  Car given green
        cur.execute("insert into green_time values ( ?, ?, ?, ?)", (new_car.event, new_car.run_num, new_car.curr_car, val))
        if debug.cb_debug:
            print(gpio, level, val, pigpio.tickDiff(tick, new_car.tick), new_car.tick, new_car.time)
        Green_f.seek(0)
        Green_f.write(str(new_car.curr_car)+"    ")
        Green_f.flush()
    else:
        if debug.cb_debug:
            print(gpio, pigpio.tickDiff(debo,tick), "debounce")
    if debug.cb_debug:
        print("debug ", gpio, tick, debo)

def cb_start(gpio, level, tick):
    debo=debounce[gpio]
    debounce[gpio] = tick
    if pigpio.tickDiff(debo,tick) > start_dbnce and ( start_max == 0 or cb_start.start_events < start_max ) :
        cb_start.start_events=cb_start.start_events+1
        val = int(pigpio.tickDiff(start_tick, tick) / 1000)
        if (val < new_car.tick_val) :
            val=val+4294967     # undo the wrap for database entry
        if (new_car.state == 1) :  # Got green, and this is first start trigger
          cur.execute("insert into start_time values ( ?, ?, ?, ?)", (new_car.event, new_car.run_num, new_car.curr_car, val))
          new_car.state = 2  # Have a start trigger
        elif (new_car.state == 0) :  # No car with green - red light
          # Red light
          cur.execute("insert into start_time values ( ?, ?, ?, ?)", (new_car.event, new_car.run_num, -new_car.next_car, val))
          if (new_car.next_car == new_car.next_car_dummy) :  # Last car of this run - first car of next run ??
            cur.execute("insert into start_time values ( ?, ?, ?, ?)", (new_car.event, new_car.run_num + 1, -new_car.next_car, val))
        else :  #  new_car.state == 2   #  Already have a start line trigger
          # Rear wheels slow, next car staging??
          cur.execute("insert into start_time values ( ?, ?, ?, ?)", (new_car.event, new_car.run_num, -new_car.curr_car, val))
        if debug.cb_debug:
            print(gpio, level, val)
        Start_f.seek(0)
        Start_f.write(str(new_car.curr_car)+"    ")
        Start_f.flush()
    else:
        if debug.cb_debug:
            print(gpio, pigpio.tickDiff(debo,tick), "debounce")
    if debug.cb_debug:
        print("debug ", gpio, level, tick, debo)

cb_start.start_events=0

def cb_split(gpio, level, tick):
    debo=debounce[gpio]
    debounce[gpio] = tick
    if pigpio.tickDiff(debo,tick) > split_dbnce and ( split_max == 0 or cb_split.split_events < split_max ) :
        cb_split.split_events=cb_split.split_events+1
        val = int(pigpio.tickDiff(start_tick, tick) / 1000)
        if (val < new_car.tick_val) :
            val=val+4294967     # undo the wrap for database entry
        cur.execute("insert into split_time values ( ?, ?, ?, ?)", (new_car.event, new_car.run_num, new_car.curr_car, val))
        if debug.cb_debug:
            print(gpio, level, val)
        Split_f.seek(0)
        Split_f.write(str(new_car.curr_car)+"    ")
        Split_f.flush()
    else:
        if debug.cb_debug:
            print(gpio, pigpio.tickDiff(debo,tick), "debounce")
    if debug.cb_debug:
        print("debug ", gpio, tick, debo)

cb_split.split_events=0

def cb_finish(gpio, level, tick):
    debo=debounce[gpio]
    debounce[gpio] = tick
    if pigpio.tickDiff(debo,tick) > finish_dbnce and ( finish_max == 0 or cb_finish.finish_events < finish_max ) :
        cb_finish.finish_events=cb_finish.finish_events+1
        val = int(pigpio.tickDiff(start_tick, tick) / 1000)
        if (val < new_car.tick_val) :
            val=val+4294967     # undo the wrap for database entry
        cur.execute("insert into finish_time values ( ?, ?, ?, ?)", (new_car.event, new_car.run_num, new_car.curr_car, val))
        if debug.cb_debug:
            print(gpio, level, val)
        Finish_f.seek(0)
        Finish_f.write(str(new_car.curr_car)+"    ")
        Finish_f.flush()
        new_car.state = 0  #  Car finished
        new_car.time = time.monotonic_ns() - button_lockout    #  Clear the new_car  lockout
    else:
        if debug.cb_debug:
            print(gpio, pigpio.tickDiff(debo,tick), "debounce")
    if debug.cb_debug:
        print("debug ", gpio, tick, debo)

cb_finish.finish_events=0

cur.execute("SELECT current_event, current_run "
      "FROM current_event LEFT JOIN current_run");
result=cur.fetchall()
if (len(result) >= 1) :
    new_car.event = result[0][0]
    new_car.run_num = result[0][1]
    print("Timing for event", new_car.event, "  Run", new_car.run_num)
else :
    new_car.event = -2
    print("No current event specified, storing with event", new_car.event)

if (len(result) > 1) :
    # Damn, too many entries in one or both of current_event,current_run
    cur.execute("delete FROM current_event where rowid!=1")
    cur.execute("delete FROM current_run where rowid!=1")
    print("Too many entries in current_event and/or current_run, extras cleaned out")


pi = pigpio.pi()       # pi  accesses the local Pi's GPIO

start_tick = pi.get_current_tick()

new_car.tick = start_tick

epoch_time = int(time.time())
print("start ", epoch_time, "  tick ", start_tick)

debounce[button_gpio] = start_tick
debounce[green_gpio] = start_tick + 2 
debounce[start_gpio] = start_tick + 4
if (split_gpio > 0):
    debounce[split_gpio] = start_tick + 3
debounce[finish_gpio] = start_tick + 6

#  Note:  The input board has a pull down resistor but set it on the gpio
#   also, incase the input board is not mounted.
    
if (button_gpio > 0):
    pi.set_mode(button_gpio, pigpio.INPUT)
    pi.set_pull_up_down(button_gpio, pigpio.PUD_DOWN)
    cb0 = pi.callback(button_gpio, (pigpio.FALLING_EDGE if button_falling_edge else pigpio.RISING_EDGE), cb_button) # Not necessarily used
if (green_gpio > 0):
    pi.set_mode(green_gpio, pigpio.INPUT)
    pi.set_pull_up_down(green_gpio, pigpio.PUD_DOWN)
    cb1 = pi.callback(green_gpio,  (pigpio.FALLING_EDGE if  green_falling_edge else pigpio.RISING_EDGE), cb_green)
if (start_gpio > 0):
    pi.set_mode(start_gpio, pigpio.INPUT)
    pi.set_pull_up_down(start_gpio, pigpio.PUD_DOWN)
    cb2 = pi.callback(start_gpio,  (pigpio.FALLING_EDGE if  start_falling_edge else pigpio.RISING_EDGE), cb_start)
if (split_gpio > 0):
    pi.set_mode(split_gpio, pigpio.INPUT)
    pi.set_pull_up_down(split_gpio, pigpio.PUD_DOWN)
    cur.execute("CREATE TABLE IF NOT EXISTS split_time ( event INT, run INT, car_num INT, time_ms INT )")
    cbs = pi.callback(split_gpio,  (pigpio.FALLING_EDGE if  split_falling_edge else pigpio.RISING_EDGE), cb_split)
if (finish_gpio > 0):
    pi.set_mode(finish_gpio, pigpio.INPUT)
    pi.set_pull_up_down(finish_gpio, pigpio.PUD_DOWN)
    cb3 = pi.callback(finish_gpio, (pigpio.FALLING_EDGE if finish_falling_edge else pigpio.RISING_EDGE), cb_finish)


prev_tick = pi.get_current_tick()

while (1) :
    time.sleep(400000)
    print(".", end="", flush=1)
    if (debounce[finish_gpio] > debounce[green_gpio]) :
        cur.execute("select current_event  from current_event order by ROWID limit 1")
        result=cur.fetchall()
        if (len(result) == 1) :
            new_event = result[0][0]
            if (new_event != new_car.event) :
                new_car.event = new_event
                print("Timing for event", new_car.event)
        else :
            print("Failed trying to check current event", new_car.event)
    #now_tick = pi.get_current_tick()
    #if (now_tick < prev_tick) :
    #    print("Tick has wrapped. Tick:", now_tick, "  Green:", debounce[green_gpio], "  Start:", debounce[start_gpio], "  Finish:", debounce[finish_gpio])
    #prev_tick = now_tick


